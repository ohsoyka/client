!function (t, e) { "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : t.LinaKostenko = e() }(this, function () { "use strict"; var t = [{ entity: "&quot;", symbol: '"' }, { entity: "&amp;", symbol: "&" }, { entity: "&lt;", symbol: "<" }, { entity: "&gt;", symbol: ">" }, { symbol: "À", entity: "&Agrave;" }, { symbol: "Á", entity: "&Aacute;" }, { symbol: "Â", entity: "&Acirc;" }, { symbol: "Ã", entity: "&Atilde;" }, { symbol: "Ä", entity: "&Auml;" }, { symbol: "Å", entity: "&Aring;" }, { symbol: "Æ", entity: "&AElig;" }, { symbol: "Ç", entity: "&Ccedil;" }, { symbol: "È", entity: "&Egrave;" }, { symbol: "É", entity: "&Eacute;" }, { symbol: "Ê", entity: "&Ecirc;" }, { symbol: "Ë", entity: "&Euml;" }, { symbol: "Ì", entity: "&Igrave;" }, { symbol: "Í", entity: "&Iacute;" }, { symbol: "Î", entity: "&Icirc;" }, { symbol: "Ï", entity: "&Iuml;" }, { symbol: "Ð", entity: "&ETH;" }, { symbol: "Ñ", entity: "&Ntilde;" }, { symbol: "Ò", entity: "&Ograve;" }, { symbol: "Ó", entity: "&Oacute;" }, { symbol: "Ô", entity: "&Ocirc;" }, { symbol: "Õ", entity: "&Otilde;" }, { symbol: "Ö", entity: "&Ouml;" }, { symbol: "Ø", entity: "&Oslash;" }, { symbol: "Ù", entity: "&Ugrave;" }, { symbol: "Ú", entity: "&Uacute;" }, { symbol: "Û", entity: "&Ucirc;" }, { symbol: "Ü", entity: "&Uuml;" }, { symbol: "Ý", entity: "&Yacute;" }, { symbol: "Þ", entity: "&THORN;" }, { symbol: "ß", entity: "&szlig;" }, { symbol: "à", entity: "&agrave;" }, { symbol: "á", entity: "&aacute;" }, { symbol: "â", entity: "&acirc;" }, { symbol: "ã", entity: "&atilde;" }, { symbol: "ä", entity: "&auml;" }, { symbol: "å", entity: "&aring;" }, { symbol: "æ", entity: "&aelig;" }, { symbol: "ç", entity: "&ccedil;" }, { symbol: "è", entity: "&egrave;" }, { symbol: "é", entity: "&eacute;" }, { symbol: "ê", entity: "&ecirc;" }, { symbol: "ë", entity: "&euml;" }, { symbol: "ì", entity: "&igrave;" }, { symbol: "í", entity: "&iacute;" }, { symbol: "î", entity: "&icirc;" }, { symbol: "ï", entity: "&iuml;" }, { symbol: "ð", entity: "&eth;" }, { symbol: "ñ", entity: "&ntilde;" }, { symbol: "ò", entity: "&ograve;" }, { symbol: "ó", entity: "&oacute;" }, { symbol: "ô", entity: "&ocirc;" }, { symbol: "õ", entity: "&otilde;" }, { symbol: "ö", entity: "&ouml;" }, { symbol: "ø", entity: "&oslash;" }, { symbol: "ù", entity: "&ugrave;" }, { symbol: "ú", entity: "&uacute;" }, { symbol: "û", entity: "&ucirc;" }, { symbol: "ü", entity: "&uuml;" }, { symbol: "ý", entity: "&yacute;" }, { symbol: "þ", entity: "&thorn;" }, { symbol: "ÿ", entity: "&yuml;" }, { symbol: " ", entity: "&nbsp;" }, { symbol: "¡", entity: "&iexcl;" }, { symbol: "¢", entity: "&cent;" }, { symbol: "£", entity: "&pound;" }, { symbol: "¤", entity: "&curren;" }, { symbol: "¥", entity: "&yen;" }, { symbol: "¦", entity: "&brvbar;" }, { symbol: "§", entity: "&sect;" }, { symbol: "¨", entity: "&uml;" }, { symbol: "©", entity: "&copy;" }, { symbol: "ª", entity: "&ordf;" }, { symbol: "«", entity: "&laquo;" }, { symbol: "¬", entity: "&not;" }, { symbol: "­", entity: "&shy;" }, { symbol: "®", entity: "&reg;" }, { symbol: "¯", entity: "&macr;" }, { symbol: "°", entity: "&deg;" }, { symbol: "±", entity: "&plusmn;" }, { symbol: "²", entity: "&sup2;" }, { symbol: "³", entity: "&sup3;" }, { symbol: "´", entity: "&acute;" }, { symbol: "µ", entity: "&micro;" }, { symbol: "¶", entity: "&para;" }, { symbol: "¸", entity: "&cedil;" }, { symbol: "¹", entity: "&sup1;" }, { symbol: "º", entity: "&ordm;" }, { symbol: "»", entity: "&raquo;" }, { symbol: "¼", entity: "&frac14;" }, { symbol: "½", entity: "&frac12;" }, { symbol: "¾", entity: "&frac34;" }, { symbol: "¿", entity: "&iquest;" }, { symbol: "×", entity: "&times;" }, { symbol: "÷", entity: "&divide;" }, { symbol: "∀", entity: "&forall;" }, { symbol: "∂", entity: "&part;" }, { symbol: "∃", entity: "&exist;" }, { symbol: "∅", entity: "&empty;" }, { symbol: "∇", entity: "&nabla;" }, { symbol: "∈", entity: "&isin;" }, { symbol: "∉", entity: "&notin;" }, { symbol: "∋", entity: "&ni;" }, { symbol: "∏", entity: "&prod;" }, { symbol: "∑", entity: "&sum;" }, { symbol: "−", entity: "&minus;" }, { symbol: "∗", entity: "&lowast;" }, { symbol: "√", entity: "&radic;" }, { symbol: "∝", entity: "&prop;" }, { symbol: "∞", entity: "&infin;" }, { symbol: "∠", entity: "&ang;" }, { symbol: "∧", entity: "&and;" }, { symbol: "∨", entity: "&or;" }, { symbol: "∩", entity: "&cap;" }, { symbol: "∪", entity: "&cup;" }, { symbol: "∫", entity: "&int;" }, { symbol: "∴", entity: "&there4;" }, { symbol: "∼", entity: "&sim;" }, { symbol: "≅", entity: "&cong;" }, { symbol: "≈", entity: "&asymp;" }, { symbol: "≠", entity: "&ne;" }, { symbol: "≡", entity: "&equiv;" }, { symbol: "≤", entity: "&le;" }, { symbol: "≥", entity: "&ge;" }, { symbol: "⊂", entity: "&sub;" }, { symbol: "⊃", entity: "&sup;" }, { symbol: "⊄", entity: "&nsub;" }, { symbol: "⊆", entity: "&sube;" }, { symbol: "⊇", entity: "&supe;" }, { symbol: "⊕", entity: "&oplus;" }, { symbol: "⊗", entity: "&otimes;" }, { symbol: "⊥", entity: "&perp;" }, { symbol: "⋅", entity: "&sdot;" }, { symbol: "Α", entity: "&Alpha;" }, { symbol: "Β", entity: "&Beta;" }, { symbol: "Γ", entity: "&Gamma;" }, { symbol: "Δ", entity: "&Delta;" }, { symbol: "Ε", entity: "&Epsilon;" }, { symbol: "Ζ", entity: "&Zeta;" }, { symbol: "Η", entity: "&Eta;" }, { symbol: "Θ", entity: "&Theta;" }, { symbol: "Ι", entity: "&Iota;" }, { symbol: "Κ", entity: "&Kappa;" }, { symbol: "Λ", entity: "&Lambda;" }, { symbol: "Μ", entity: "&Mu;" }, { symbol: "Ν", entity: "&Nu;" }, { symbol: "Ξ", entity: "&Xi;" }, { symbol: "Ο", entity: "&Omicron;" }, { symbol: "Π", entity: "&Pi;" }, { symbol: "Ρ", entity: "&Rho;" }, { symbol: "Σ", entity: "&Sigma;" }, { symbol: "Τ", entity: "&Tau;" }, { symbol: "Υ", entity: "&Upsilon;" }, { symbol: "Φ", entity: "&Phi;" }, { symbol: "Χ", entity: "&Chi;" }, { symbol: "Ψ", entity: "&Psi;" }, { symbol: "Ω", entity: "&Omega;" }, { symbol: "α", entity: "&alpha;" }, { symbol: "β", entity: "&beta;" }, { symbol: "γ", entity: "&gamma;" }, { symbol: "δ", entity: "&delta;" }, { symbol: "ε", entity: "&epsilon;" }, { symbol: "ζ", entity: "&zeta;" }, { symbol: "η", entity: "&eta;" }, { symbol: "θ", entity: "&theta;" }, { symbol: "ι", entity: "&iota;" }, { symbol: "κ", entity: "&kappa;" }, { symbol: "λ", entity: "&lambda;" }, { symbol: "μ", entity: "&mu;" }, { symbol: "ν", entity: "&nu;" }, { symbol: "ξ", entity: "&xi;" }, { symbol: "ο", entity: "&omicron;" }, { symbol: "π", entity: "&pi;" }, { symbol: "ρ", entity: "&rho;" }, { symbol: "ς", entity: "&sigmaf;" }, { symbol: "σ", entity: "&sigma;" }, { symbol: "τ", entity: "&tau;" }, { symbol: "υ", entity: "&upsilon;" }, { symbol: "φ", entity: "&phi;" }, { symbol: "χ", entity: "&chi;" }, { symbol: "ψ", entity: "&psi;" }, { symbol: "ω", entity: "&omega;" }, { symbol: "ϑ", entity: "&thetasym;" }, { symbol: "ϒ", entity: "&upsih;" }, { symbol: "ϖ", entity: "&piv;" }, { symbol: "Œ", entity: "&OElig;" }, { symbol: "œ", entity: "&oelig;" }, { symbol: "Š", entity: "&Scaron;" }, { symbol: "š", entity: "&scaron;" }, { symbol: "Ÿ", entity: "&Yuml;" }, { symbol: "ƒ", entity: "&fnof;" }, { symbol: "ˆ", entity: "&circ;" }, { symbol: "˜", entity: "&tilde;" }, { symbol: " ", entity: "&ensp;" }, { symbol: " ", entity: "&emsp;" }, { symbol: " ", entity: "&thinsp;" }, { symbol: "‌", entity: "&zwnj;" }, { symbol: "‍", entity: "&zwj;" }, { symbol: "‎", entity: "&lrm;" }, { symbol: "‏", entity: "&rlm;" }, { symbol: "–", entity: "&ndash;" }, { symbol: "—", entity: "&mdash;" }, { symbol: "‘", entity: "&lsquo;" }, { symbol: "’", entity: "&rsquo;" }, { symbol: "‚", entity: "&sbquo;" }, { symbol: "“", entity: "&ldquo;" }, { symbol: "”", entity: "&rdquo;" }, { symbol: "„", entity: "&bdquo;" }, { symbol: "†", entity: "&dagger;" }, { symbol: "‡", entity: "&Dagger;" }, { symbol: "•", entity: "&bull;" }, { symbol: "…", entity: "&hellip;" }, { symbol: "‰", entity: "&permil;" }, { symbol: "′", entity: "&prime;" }, { symbol: "″", entity: "&Prime;" }, { symbol: "‹", entity: "&lsaquo;" }, { symbol: "›", entity: "&rsaquo;" }, { symbol: "‾", entity: "&oline;" }, { symbol: "€", entity: "&euro;" }, { symbol: "™", entity: "&trade;" }, { symbol: "←", entity: "&larr;" }, { symbol: "↑", entity: "&uarr;" }, { symbol: "→", entity: "&rarr;" }, { symbol: "↓", entity: "&darr;" }, { symbol: "↔", entity: "&harr;" }, { symbol: "↵", entity: "&crarr;" }, { symbol: "⌈", entity: "&lceil;" }, { symbol: "⌉", entity: "&rceil;" }, { symbol: "⌊", entity: "&lfloor;" }, { symbol: "⌋", entity: "&rfloor;" }, { symbol: "◊", entity: "&loz;" }, { symbol: "♠", entity: "&spades;" }, { symbol: "♣", entity: "&clubs;" }, { symbol: "♥", entity: "&hearts;" }, { symbol: "♦", entity: "&diams;" }], e = "абвгґдеєжзиіїйклмнопрстуфхцчшщьюяўэыАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯЎЭЫabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPGRSTUVWXYZ", n = ["!!!", ".", "!", "?", "…"], y = ["\n", "\r", " "], i = /(?:<\w+[\s\w\d=\-.,+;"':/]*>|<\/\w+>|&#\d{2,4};)/g, o = "%HTML%"; var l = '"', s = ["«", "»"], m = ["„", "“"]; function r(t, e) { var i = e.outer, o = e.inner; return function (t) { for (var e = [], i = t.length, o = 0, l = !1, s = 0; s < i; s += 1) { var m = t[s], r = t[s - 1]; '"' === m && (l = !l); var b = y.includes(m) && n.includes(r); (s === i - 1 || b && !l) && (e.push(t.slice(o, s + 1)), o = s + 1) } return e }(t).map(function (t) { return function t(e, n) { var y = n.outer, i = n.inner, o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], s = e.indexOf(l), m = e.lastIndexOf(l); if (-1 === s || -1 === m || s === m) return e; var r = e.slice(0, s), b = e.slice(s + 1, m), a = e.slice(m + 1), u = o ? i : y; return r + u[0] + t(b, { inner: i }, !0) + u[1] + a }(t, { outer: i, inner: o }) }).join("") } var b = { forceSpaceAfterPunctuation: function (t) { return t.replace(new RegExp("([абвгґдеєжзиіїйклмнопрстуфхцчшщьюяўэыАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯЎЭЫabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPGRSTUVWXYZ0123456789]+)([,!.:?;…])([" + e + "]+?)", "g"), "$1$2 $3") }, normalizeSeriesOfExclamationMarks: function (t) { return t.replace(/!{2,}/g, "!!!") }, normalizeSeriesOfQuestionMarks: function (t) { return t.replace(/\?{2,}/g, "???") }, replaceHyphensInDateRangesWithLongDashes: function (t) { return t.replace(/(\d{4})-(\d{4})/g, "$1&mdash;$2") }, replaceHyphensWithLongDashes: function (t) { return t.replace(new RegExp("(^|[\n" + o + "])- ?", "g"), "$1—&nbsp;").replace(/ - /g, "&nbsp;— ") }, replaceSeriesOfDotsWithEllipsis: function (t) { return t.replace(/\.{2,}/g, "…") }, replaceSeriesOfSpacesWithOneSpace: function (t) { return t.replace(/ {2,}/g, " ") }, replaceStraightQuotationMarks: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = void 0, y = void 0; return e.outer && e.inner ? (n = e.outer, y = e.inner) : e.outer ? (n = e.outer, y = e.outer) : (n = s, y = m), r(t, { inner: y, outer: n }) }, replaceHTMLEntitiesWithSpecialSymbols: function (e) { return t.reduce(function (t, e) { var n = e.symbol, y = e.entity; return t.replace(new RegExp("" + y, "g"), n) }, e) }, replaceSpecialSymbolsWithHTMLCodes: function (e) { return t.filter(function (t) { var e = t.symbol; return " " !== e && "&" !== e }).reduce(function (t, e) { var n = e.symbol, y = e.entity; return t.replace(new RegExp("" + n, "g"), y) }, e) }, forceNonBreakingSpaceAroundLongDashes: function (t) { return t.replace(/ —/g, "&nbsp;—").replace(new RegExp("(^|[\n" + o + "])— ?", "g"), "$1—&nbsp;") } }, a = function (t) { for (var e = void 0, n = [], y = []; e = i.exec(t);) { var o = e.index, l = { begin: o, end: o + e[0].length, type: "html", content: e[0] }; y.push(l) } for (var s = 0, m = 0, r = function (e) { var i = y.find(function (t) { return e >= t.begin && e < t.end }); i ? (m = e, n.push({ begin: s, end: m, type: "text", content: t.slice(s, m) }), e = i.end - 1, s = i.end) : e === t.length - 1 && (m = t.length, n.push({ begin: s, end: m, type: "text", content: t.slice(s, m) })), b = e }, b = 0; b < t.length; b += 1)r(b); return [].concat(y).concat(n).filter(function (t) { return t.begin < t.end }).sort(function (t, e) { return t.begin > e.begin ? 1 : t.begin < e.begin ? -1 : 0 }) }; function u(t) { return function (e) { for (var n = arguments.length, y = Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++)y[i - 1] = arguments[i]; var l = a(e), s = l.map(function (t) { return "html" === t.type ? o : t.content }).join(""), m = t.apply(void 0, [s].concat(y)); return l.filter(function (t) { return "html" === t.type }).map(function (t) { return t.content }).reduce(function (t, e) { return t.replace(o, e) }, m) } } var c = Object.keys(b), p = { create: function (t) { var e = { value: function () { return t } }; return p.injectRules(e, t) }, injectRules: function (t, e) { return c.reduce(function (t, n) { return Object.assign(t, function (t, e, n) { return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t }({}, n, function () { for (var t = arguments.length, y = Array(t), i = 0; i < t; i++)y[i] = arguments[i]; var o = u(b[n]).apply(void 0, [e].concat(y)); return p.create(o) })) }, t) } }, f = ["replaceHTMLEntitiesWithSpecialSymbols", "replaceSeriesOfDotsWithEllipsis", "normalizeSeriesOfExclamationMarks", "normalizeSeriesOfQuestionMarks", "forceSpaceAfterPunctuation", "forceNonBreakingSpaceAroundLongDashes", "replaceSeriesOfSpacesWithOneSpace", "replaceHyphensWithLongDashes", "replaceHyphensInDateRangesWithLongDashes", "replaceStraightQuotationMarks"]; function g(t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = b[t]; if (!n) throw new Error('Rule "' + t + "\" doesn't exist."); return e.ignoreHTML ? n : u(n) } var d = function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; if (!t) return ""; var n = Object.keys(e).filter(function (t) { return !1 === e[t] }), y = f.filter(function (t) { return !n.includes(t) }).map(function (t) { return g(t, e) }); return e.output && "text" === e.output && y.push(b.replaceHTMLEntitiesWithSpecialSymbols), y.reduce(function (t, e) { return e(t) }, t) }; return Object.keys(b).forEach(function (t) { d[t] = function (e) { var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; return g(t, n)(e, n) } }), d.chain = function (t) { return p.create(t) }, d });
